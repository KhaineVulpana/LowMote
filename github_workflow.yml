name: Build VPN Tunnel Remote Desktop

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build on Windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make
        
    - name: Build with MinGW
      shell: msys2 {0}
      run: |
        echo "Building VPN Tunnel Remote Desktop for Windows..."
        g++ -std=c++17 -O2 -DWIN32_LEAN_AND_MEAN client.cpp -o client.exe -lws2_32 -ld3d11 -ldxgi -lntdll -lgdi32 -luser32 -static
        g++ -std=c++17 -O2 -DWIN32_LEAN_AND_MEAN server.cpp -o server.exe -lws2_32 -lgdi32 -luser32 -static
        
    - name: Test executables
      shell: msys2 {0}
      run: |
        echo "Checking build artifacts..."
        ls -la *.exe
        echo "Build completed successfully!"
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          client.exe
          server.exe
        retention-days: 7

  build-linux:
    runs-on: ubuntu-latest
    name: Build on Linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libx11-dev libxext-dev
        
    - name: Build with GCC
      run: |
        echo "Building VPN Tunnel Remote Desktop for Linux..."
        g++ -std=c++17 -O2 client.cpp -o client -pthread
        g++ -std=c++17 -O2 server.cpp -o server -pthread -lX11
        
    - name: Test executables
      run: |
        echo "Checking build artifacts..."
        ls -la client server
        echo "Build completed successfully!"
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          client
          server
        retention-days: 7

  build-with-makefile:
    runs-on: ubuntu-latest
    name: Test Makefile Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libx11-dev libxext-dev
        
    - name: Build with Makefile
      run: |
        echo "Testing Makefile build process..."
        make clean
        make all
        
    - name: Test build
      run: |
        make test-build

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    name: Create Release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: ./windows/
        
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: ./linux/
        
    - name: Create release archive
      run: |
        mkdir -p release
        
        # Windows build
        mkdir -p release/windows
        cp windows/* release/windows/
        
        # Linux build  
        mkdir -p release/linux
        cp linux/* release/linux/
        
        # Documentation
        echo "# VPN Tunnel Remote Desktop" > release/README.md
        echo "" >> release/README.md
        echo "## Usage" >> release/README.md
        echo "1. Start server: ./server [port]" >> release/README.md
        echo "2. Connect client: ./client <server_ip> <port>" >> release/README.md
        echo "" >> release/README.md
        echo "## Build Info" >> release/README.md
        echo "Built on: $(date)" >> release/README.md
        echo "Commit: ${{ github.sha }}" >> release/README.md
        
        # Copy source files
        cp *.cpp release/
        cp Makefile release/
        
        # Create archives
        cd release
        tar -czf ../vpn-tunnel-desktop-linux.tar.gz linux/ *.cpp Makefile README.md
        zip -r ../vpn-tunnel-desktop-windows.zip windows/ *.cpp Makefile README.md
        
    - name: Upload release archives
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: |
          vpn-tunnel-desktop-*.tar.gz
          vpn-tunnel-desktop-*.zip
        retention-days: 30